// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameInfo.pb.h"

#include <algorithm>

#include "google/protobuf/stubs/common.h"
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace info {

namespace {

const ::google::protobuf::Descriptor* RoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameInfo_2eproto() {
  protobuf_AddDesc_GameInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameInfo.proto");
  GOOGLE_CHECK(file != NULL);
  RoleInfo_descriptor_ = file->message_type(0);
  static const int RoleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, type_),
  };
  RoleInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleInfo_descriptor_,
      RoleInfo::default_instance_,
      RoleInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoleInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfo, _is_default_instance_));
  ItemInfo_descriptor_ = file->message_type(1);
  static const int ItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, price_),
  };
  ItemInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _is_default_instance_));
  GameInfo_descriptor_ = file->message_type(2);
  static const int GameInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, roleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, iteminfo_),
  };
  GameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleInfo_descriptor_, &RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameInfo_descriptor_, &GameInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameInfo_2eproto() {
  delete RoleInfo::default_instance_;
  delete RoleInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
}

void protobuf_AddDesc_GameInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game::enumeration::protobuf_AddDesc_GameEnum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GameInfo.proto\022\tgame.info\032\016GameEnum.pr"
    "oto\"B\n\010RoleInfo\022\014\n\004name\030\001 \001(\t\022(\n\004type\030\002 "
    "\001(\0162\032.game.enumeration.RoleType\"\'\n\010ItemI"
    "nfo\022\014\n\004name\030\001 \001(\t\022\r\n\005price\030\002 \001(\005\"X\n\010Game"
    "Info\022%\n\010roleInfo\030\001 \003(\0132\023.game.info.RoleI"
    "nfo\022%\n\010itemInfo\030\002 \003(\0132\023.game.info.ItemIn"
    "fob\006proto3", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameInfo.proto", &protobuf_RegisterTypes);
  RoleInfo::default_instance_ = new RoleInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  GameInfo::default_instance_ = new GameInfo();
  RoleInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameInfo_2eproto {
  StaticDescriptorInitializer_GameInfo_2eproto() {
    protobuf_AddDesc_GameInfo_2eproto();
  }
} static_descriptor_initializer_GameInfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleInfo::kNameFieldNumber;
const int RoleInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleInfo::RoleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.info.RoleInfo)
}

void RoleInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoleInfo::RoleInfo(const RoleInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game.info.RoleInfo)
}

void RoleInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

RoleInfo::~RoleInfo() {
  // @@protoc_insertion_point(destructor:game.info.RoleInfo)
  SharedDtor();
}

void RoleInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfo_descriptor_;
}

const RoleInfo& RoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameInfo_2eproto();
  return *default_instance_;
}

RoleInfo* RoleInfo::default_instance_ = NULL;

RoleInfo* RoleInfo::New(::google::protobuf::Arena* arena) const {
  RoleInfo* n = new RoleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleInfo::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.info.RoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "game.info.RoleInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .game.enumeration.RoleType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::game::enumeration::RoleType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.info.RoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.info.RoleInfo)
  return false;
#undef DO_
}

void RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.info.RoleInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "game.info.RoleInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .game.enumeration.RoleType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:game.info.RoleInfo)
}

::google::protobuf::uint8* RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.info.RoleInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "game.info.RoleInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .game.enumeration.RoleType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.info.RoleInfo)
  return target;
}

int RoleInfo::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .game.enumeration.RoleType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoleInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfo::MergeFrom(const RoleInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {

  return true;
}

void RoleInfo::Swap(RoleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleInfo::InternalSwap(RoleInfo* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfo_descriptor_;
  metadata.reflection = RoleInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleInfo

// optional string name = 1;
void RoleInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoleInfo::name() const {
  // @@protoc_insertion_point(field_get:game.info.RoleInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.info.RoleInfo.name)
}
 void RoleInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.info.RoleInfo.name)
}
 void RoleInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.info.RoleInfo.name)
}
 ::std::string* RoleInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:game.info.RoleInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleInfo::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:game.info.RoleInfo.name)
}

// optional .game.enumeration.RoleType type = 2;
void RoleInfo::clear_type() {
  type_ = 0;
}
 ::game::enumeration::RoleType RoleInfo::type() const {
  // @@protoc_insertion_point(field_get:game.info.RoleInfo.type)
  return static_cast< ::game::enumeration::RoleType >(type_);
}
 void RoleInfo::set_type(::game::enumeration::RoleType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:game.info.RoleInfo.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemInfo::kNameFieldNumber;
const int ItemInfo::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemInfo::ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.info.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game.info.ItemInfo)
}

void ItemInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:game.info.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameInfo_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New(::google::protobuf::Arena* arena) const {
  ItemInfo* n = new ItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemInfo::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.info.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "game.info.ItemInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.info.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.info.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.info.ItemInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "game.info.ItemInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // @@protoc_insertion_point(serialize_end:game.info.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.info.ItemInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "game.info.ItemInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.info.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemInfo::InternalSwap(ItemInfo* other) {
  name_.Swap(&other->name_);
  std::swap(price_, other->price_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemInfo

// optional string name = 1;
void ItemInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ItemInfo::name() const {
  // @@protoc_insertion_point(field_get:game.info.ItemInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:game.info.ItemInfo.name)
}
 void ItemInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:game.info.ItemInfo.name)
}
 void ItemInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:game.info.ItemInfo.name)
}
 ::std::string* ItemInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:game.info.ItemInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ItemInfo::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:game.info.ItemInfo.name)
}

// optional int32 price = 2;
void ItemInfo::clear_price() {
  price_ = 0;
}
 ::google::protobuf::int32 ItemInfo::price() const {
  // @@protoc_insertion_point(field_get:game.info.ItemInfo.price)
  return price_;
}
 void ItemInfo::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:game.info.ItemInfo.price)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kRoleInfoFieldNumber;
const int GameInfo::kItemInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.info.GameInfo)
}

void GameInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game.info.GameInfo)
}

void GameInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:game.info.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameInfo_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New(::google::protobuf::Arena* arena) const {
  GameInfo* n = new GameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInfo::Clear() {
  roleinfo_.Clear();
  iteminfo_.Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.info.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.info.RoleInfo roleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_roleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_roleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_roleInfo;
        if (input->ExpectTag(18)) goto parse_loop_itemInfo;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .game.info.ItemInfo itemInfo = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_itemInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.info.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.info.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.info.GameInfo)
  // repeated .game.info.RoleInfo roleInfo = 1;
  for (unsigned int i = 0, n = this->roleinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleinfo(i), output);
  }

  // repeated .game.info.ItemInfo itemInfo = 2;
  for (unsigned int i = 0, n = this->iteminfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:game.info.GameInfo)
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.info.GameInfo)
  // repeated .game.info.RoleInfo roleInfo = 1;
  for (unsigned int i = 0, n = this->roleinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleinfo(i), target);
  }

  // repeated .game.info.ItemInfo itemInfo = 2;
  for (unsigned int i = 0, n = this->iteminfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.info.GameInfo)
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  // repeated .game.info.RoleInfo roleInfo = 1;
  total_size += 1 * this->roleinfo_size();
  for (int i = 0; i < this->roleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfo(i));
  }

  // repeated .game.info.ItemInfo itemInfo = 2;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  roleinfo_.MergeFrom(from.roleinfo_);
  iteminfo_.MergeFrom(from.iteminfo_);
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  roleinfo_.UnsafeArenaSwap(&other->roleinfo_);
  iteminfo_.UnsafeArenaSwap(&other->iteminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInfo

// repeated .game.info.RoleInfo roleInfo = 1;
int GameInfo::roleinfo_size() const {
  return roleinfo_.size();
}
void GameInfo::clear_roleinfo() {
  roleinfo_.Clear();
}
const ::game::info::RoleInfo& GameInfo::roleinfo(int index) const {
  // @@protoc_insertion_point(field_get:game.info.GameInfo.roleInfo)
  return roleinfo_.Get(index);
}
::game::info::RoleInfo* GameInfo::mutable_roleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:game.info.GameInfo.roleInfo)
  return roleinfo_.Mutable(index);
}
::game::info::RoleInfo* GameInfo::add_roleinfo() {
  // @@protoc_insertion_point(field_add:game.info.GameInfo.roleInfo)
  return roleinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::game::info::RoleInfo >*
GameInfo::mutable_roleinfo() {
  // @@protoc_insertion_point(field_mutable_list:game.info.GameInfo.roleInfo)
  return &roleinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::game::info::RoleInfo >&
GameInfo::roleinfo() const {
  // @@protoc_insertion_point(field_list:game.info.GameInfo.roleInfo)
  return roleinfo_;
}

// repeated .game.info.ItemInfo itemInfo = 2;
int GameInfo::iteminfo_size() const {
  return iteminfo_.size();
}
void GameInfo::clear_iteminfo() {
  iteminfo_.Clear();
}
const ::game::info::ItemInfo& GameInfo::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:game.info.GameInfo.itemInfo)
  return iteminfo_.Get(index);
}
::game::info::ItemInfo* GameInfo::mutable_iteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:game.info.GameInfo.itemInfo)
  return iteminfo_.Mutable(index);
}
::game::info::ItemInfo* GameInfo::add_iteminfo() {
  // @@protoc_insertion_point(field_add:game.info.GameInfo.itemInfo)
  return iteminfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::game::info::ItemInfo >*
GameInfo::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:game.info.GameInfo.itemInfo)
  return &iteminfo_;
}
const ::google::protobuf::RepeatedPtrField< ::game::info::ItemInfo >&
GameInfo::iteminfo() const {
  // @@protoc_insertion_point(field_list:game.info.GameInfo.itemInfo)
  return iteminfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace info
}  // namespace game

// @@protoc_insertion_point(global_scope)
