// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#ifndef PROTOBUF_GameInfo_2eproto__INCLUDED
#define PROTOBUF_GameInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
//#error This file was generated by an older version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please
//#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GameEnum.pb.h"
// @@protoc_insertion_point(includes)

namespace game {
namespace info {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameInfo_2eproto();
void protobuf_AssignDesc_GameInfo_2eproto();
void protobuf_ShutdownFile_GameInfo_2eproto();

class RoleInfo;
class ItemInfo;
class GameInfo;

// ===================================================================

class RoleInfo : public ::google::protobuf::Message {
 public:
  RoleInfo();
  virtual ~RoleInfo();

  RoleInfo(const RoleInfo& from);

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfo& default_instance();

  void Swap(RoleInfo* other);

  // implements Message ----------------------------------------------

  RoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleInfo& from);
  void MergeFrom(const RoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .game.enumeration.RoleType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::game::enumeration::RoleType type() const;
  inline void set_type(::game::enumeration::RoleType value);

  // @@protoc_insertion_point(class_scope:game.info.RoleInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameInfo_2eproto();
  friend void protobuf_AssignDesc_GameInfo_2eproto();
  friend void protobuf_ShutdownFile_GameInfo_2eproto();

  void InitAsDefaultInstance();
  static RoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::Message {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();

  void Swap(ItemInfo* other);

  // implements Message ----------------------------------------------

  ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.info.ItemInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameInfo_2eproto();
  friend void protobuf_AssignDesc_GameInfo_2eproto();
  friend void protobuf_ShutdownFile_GameInfo_2eproto();

  void InitAsDefaultInstance();
  static ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameInfo : public ::google::protobuf::Message {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();

  void Swap(GameInfo* other);

  // implements Message ----------------------------------------------

  GameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.info.RoleInfo roleInfo = 1;
  inline int roleinfo_size() const;
  inline void clear_roleinfo();
  static const int kRoleInfoFieldNumber = 1;
  inline const ::game::info::RoleInfo& roleinfo(int index) const;
  inline ::game::info::RoleInfo* mutable_roleinfo(int index);
  inline ::game::info::RoleInfo* add_roleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::info::RoleInfo >&
      roleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::info::RoleInfo >*
      mutable_roleinfo();

  // repeated .game.info.ItemInfo itemInfo = 2;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 2;
  inline const ::game::info::ItemInfo& iteminfo(int index) const;
  inline ::game::info::ItemInfo* mutable_iteminfo(int index);
  inline ::game::info::ItemInfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::info::ItemInfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::info::ItemInfo >*
      mutable_iteminfo();

  // @@protoc_insertion_point(class_scope:game.info.GameInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::game::info::RoleInfo > roleinfo_;
  ::google::protobuf::RepeatedPtrField< ::game::info::ItemInfo > iteminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameInfo_2eproto();
  friend void protobuf_AssignDesc_GameInfo_2eproto();
  friend void protobuf_ShutdownFile_GameInfo_2eproto();

  void InitAsDefaultInstance();
  static GameInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// RoleInfo

// required string name = 1;
inline bool RoleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleInfo::name() const {
  return *name_;
}
inline void RoleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .game.enumeration.RoleType type = 2;
inline bool RoleInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::game::enumeration::RoleType RoleInfo::type() const {
  return static_cast< ::game::enumeration::RoleType >(type_);
}
inline void RoleInfo::set_type(::game::enumeration::RoleType value) {
  assert(::game::enumeration::RoleType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ItemInfo

// required string name = 1;
inline bool ItemInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ItemInfo::name() const {
  return *name_;
}
inline void ItemInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ItemInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ItemInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ItemInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ItemInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 price = 2;
inline bool ItemInfo::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemInfo::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemInfo::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ItemInfo::price() const {
  return price_;
}
inline void ItemInfo::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// GameInfo

// repeated .game.info.RoleInfo roleInfo = 1;
inline int GameInfo::roleinfo_size() const {
  return roleinfo_.size();
}
inline void GameInfo::clear_roleinfo() {
  roleinfo_.Clear();
}
inline const ::game::info::RoleInfo& GameInfo::roleinfo(int index) const {
  return roleinfo_.Get(index);
}
inline ::game::info::RoleInfo* GameInfo::mutable_roleinfo(int index) {
  return roleinfo_.Mutable(index);
}
inline ::game::info::RoleInfo* GameInfo::add_roleinfo() {
  return roleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::info::RoleInfo >&
GameInfo::roleinfo() const {
  return roleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::info::RoleInfo >*
GameInfo::mutable_roleinfo() {
  return &roleinfo_;
}

// repeated .game.info.ItemInfo itemInfo = 2;
inline int GameInfo::iteminfo_size() const {
  return iteminfo_.size();
}
inline void GameInfo::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::game::info::ItemInfo& GameInfo::iteminfo(int index) const {
  return iteminfo_.Get(index);
}
inline ::game::info::ItemInfo* GameInfo::mutable_iteminfo(int index) {
  return iteminfo_.Mutable(index);
}
inline ::game::info::ItemInfo* GameInfo::add_iteminfo() {
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::info::ItemInfo >&
GameInfo::iteminfo() const {
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::info::ItemInfo >*
GameInfo::mutable_iteminfo() {
  return &iteminfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace info
}  // namespace game

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameInfo_2eproto__INCLUDED
